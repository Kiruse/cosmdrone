yarn run v1.22.19
$ node dist/cli/cosmdrone.js chain api show kujira /cosmos/tx/v1beta1/simulate
post:
  summary: Simulate simulates executing a transaction for estimating gas usage.
  operationId: CosmosTxV1Beta1Simulate
  responses:
    "200":
      description: A successful response.
      schema:
        type: object
        properties:
          gas_info:
            description: gas_info is the information about gas used in the simulation.
            type: object
            properties:
              gas_wanted:
                type: string
                format: uint64
                description: GasWanted is the maximum units of work we allow this tx to perform.
              gas_used:
                type: string
                format: uint64
                description: GasUsed is the amount of gas actually consumed.
          result:
            description: result is the result of the simulation.
            type: object
            properties:
              data:
                type: string
                format: byte
                description: >-
                  Data is any data returned from message or handler execution.
                  It MUST be

                  length prefixed in order to separate data from multiple message executions.

                  Deprecated. This field is still populated, but prefer msg_response instead

                  because it also contains the Msg response typeURL.
              log:
                type: string
                description: Log contains the log information from message or handler execution.
              events:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    attributes:
                      type: array
                      items:
                        type: object
                        properties:
                          key:
                            type: string
                            format: byte
                          value:
                            type: string
                            format: byte
                          index:
                            type: boolean
                            title: nondeterministic
                        description: EventAttribute is a single key-value pair, associated with an
                          event.
                  description: >-
                    Event allows application developers to attach additional
                    information to

                    ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.

                    Later, transactions may be queried using these events.
                description: >-
                  Events contains a slice of Event objects that were emitted
                  during message

                  or handler execution.
              msg_responses:
                type: array
                items:
                  type: object
                  properties:
                    "@type":
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at least

                        one "/" character. The last segment of the URL's path must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary all types that they

                        expect it to use in the context of Any. However, for URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally set up a type

                        server that maps type URLs to message definitions as follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in the official

                        protobuf release, and it is not used for type URLs beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme) might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values in the form

                    of utility functions or additional generated methods of the Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by default use

                    'type.googleapis.com/full.type.name' as the type URL and the unpack

                    methods only use the fully qualified type name after the last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with an

                    additional field `@type` which contains the type URL. Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom JSON

                    representation, that representation will be embedded adding a field

                    `value` which holds the custom JSON in addition to the `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                description: >-
                  msg_responses contains the Msg handler responses type packed
                  in Anys.


                  Since: cosmos-sdk 0.46
        description: |-
          SimulateResponse is the response type for the
          Service.SimulateRPC method.
    default:
      description: An unexpected error response.
      schema:
        type: object
        properties:
          code:
            type: integer
            format: int32
          message:
            type: string
          details:
            type: array
            items:
              type: object
              properties:
                "@type":
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all types that they

                    expect it to use in the context of Any. However, for URLs which use the

                    scheme `http`, `https`, or no scheme, one can optionally set up a type

                    server that maps type URLs to message definitions as follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official

                    protobuf release, and it is not used for type URLs beginning with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme) might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in the form

                of utility functions or additional generated methods of the Any type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default use

                'type.googleapis.com/full.type.name' as the type URL and the unpack

                methods only use the fully qualified type name after the last '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
  parameters:
    - name: body
      description: |-
        SimulateRequest is the request type for the Service.Simulate
        RPC method.
      in: body
      required: true
      schema:
        $ref: "#/definitions/cosmos.tx.v1beta1.SimulateRequest"
  tags:
    - Service

Done in 2.79s.
